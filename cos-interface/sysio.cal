         TITLE     'SYSIO'
         SUBTITLE  'System I/O utility functions'
         IDENT     SYSIO
         COMMENT   'SYSIO - System I/O utility functions'
         ENTRY     $RWDP,$RWDR,$WWDP,$WWDR,$WEOF,$WEOD,$REWD

**
*  $RWDP/$RWDR - Read Words Partial/Record
*
*  Entry:
*    (A1) DSP address
*    (A2) FWA of user data area (UDA)
*    (A3) Requested word count (CT)
*
*  Return conditions:
*    (A1) DSP address
*    (A2) FWA of user data area (UDA)
*    (A3) Requested word count (CT)
*    (A4) Actual LWA+1 of data transferred to UDA. (A4)=(A2) if a null
*         record was read.
*    (S0) Condition of termination:
*           < 0 EOR encountered.
*           = 0 Null record, EOF, EOD, or unrecovered data error
*               encountered.
*           > 0 User-specified count (A3) exhausted before EOR is
*               encountered. For partial read (READP) if EOR and end of
*               count coincide, EOR takes precedence.
*    (S1) Error status:
*           = 0 No errors encountered.
*           = 1 Unrecovered data error encountered.
*    (S6) Contents of DPCWF if (SO)<=0 and (S1)=0, otherwise, meaningless.
*         Note that for READ/READP, the unused bit count can also be
*         obtained from S6 if (SO)<O.
*  

$RWDP    SUBR
         S1        BIOFRRP        ; Function Read Record Partial
         R         $RWD
$RWDP    RETURN

$RWDR    SUBR
         S1        BIOFRR         ; Function Read Record
         R         $RWD
$RWDR    RETURN

$RWD     SUBR
$RWD1    S0        DPBIO,A1
         JSM       $RWD7          ; if buffered I/O busy
         S1        S1<(D'63-D'9)  ; position function code
         S2        A3
         S2        S2<(D'63-D'39) ; position and merge word count
         S1        S1!S2
         S2        A2             ; merge user data area address
         S1        S1!S2
         DPBIO,A1  S1
         S0        F$BIO          ; initiate function
         S1        A1
         EX
$RWD2    R         $WIO           ; wait for function to complete
         S0        DPBIO,A1
         JSM       $RWD2          ; if not complete
         S0        S0<1
         JSM       $RWD6          ; if error
         S1        0              ; set no errors encountered
         S0        S0>(D'63-D'40) ; position and isolate count of words read
         S2        <D'24
         S0        S0&S2
         JSZ       $RWD5          ; if no words read
         A4        S0             ; compute LWA+1 of data transferred to UDA
         A4        A2+A4
         S0        DPCWF,A1       ; check for EOR
         JSM       $RWD4          ; if EOR
$RWD3    =         *
$RWD     RETURN

$RWD4    S6        DPBUBC,A1      ; position and isolate unused bit count
         S6        S6>(D'63-D'15)
         S2        <6
         S6        S6&S2
         S0        -1             ; indicate EOR
         J         $RWD3

$RWD5    A4        A2             ; no words read, determine whether EOR/EOF/EOD
         S0        DPCWF,A1       ; check for EOR
         JSM       $RWD4          ; if EOR
         S0        0              ; indicate EOF/EOD
         J         $RWD3

$RWD6    S1        1              ; indicate error encountered
         S0        0
         J         $RWD3

$RWD7    R         $WIO
         J         $RWD1

$WWDP    =         *              ; Write partial record
$WWDR    =         *              ; Write record
$WEOF    =         *              ; Write EOF
$WEOD    =         *              ; Write EOD
$REWD    =         *              ; Rewind

$WIO     SUBR
         S0        F$RCL
         S1        A1
         EX
$WIO     RETURN

         END
